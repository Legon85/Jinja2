# Экранировать строку так, чтобы фрагмент шаблона{{name}} оставался в первоначальном виде:

# data = '''Модуль jinja вместо
# определения {{name}}
# подставляет соответствующее значение'''
#
# tm = Template(data)
# msg = tm.render(name='Федор')
#
# print(msg)
#
# В тексте:
# link = '''В HTML-документе ссылки определяются так:
# <a href="#">Ссылка</a>'''
# экранировать теги флагом так,что бы после сохранении в html-файл этот файл отображал в браузере именно эту информацию
# вместе с тегами <a href="#">Ссылка</a>  , а не ссылка.
#
# Сделать то же самое только с помощью модуля escape.
#
# Дан список:
#
# cities = [{'id': 1, 'city': 'Moscow'},
#           {'id': 5, 'city': 'Tver'},
#           {'id': 7, 'city': 'Minsk'},
#           {'id': 8, 'city': 'Smolensk'},
#           {'id': 11, 'city': 'Kaluga'}]
#
# Сформировать в html документе выпадающий список из данных выше представленного списка, подставляя данные в шаблоны с
# помощью блока {% for %} вставляя синтаксис вместо знаков вопроса.

# link = '''<select name="cities">
# ????????????????????
#     <option value=???????????????????}</option>
# ???????????????????
# </select>'''
#
# Сделать это так, чтобы не было пустых строк в html документе при выводе программы.(компактный вид)
#
# Сохранить результат в html документ и открыть в браузере.
#
# Используя данные из выше приведённого примера с помощью блока if сделать так, чтоб в списке были только города у
# которых id больше 6.
#
# Проверить открыв в браузере.
#
# Добавить условие else в наш код. Чтоб по нему просто добавлялся город из списка без тега <option>
#
# Добавим elif. Если город == Moscow, то добавить город с тегом option.
#
